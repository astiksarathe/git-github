CentraLized Workflow
    Everyone is working on a same branch (for ex: Master branch)

Features Branches 
    Rather than working on Master/Main branch, all new development 
    should be done on separate branches

Pull Request 
    A pull request (PR) is a way to propose changes to a codebase hosted in a repository. 
    It enables collaboration in software development by allowing developers to suggest 
    modifications, have those changes reviewed, and then integrate them into the main branch. 
    The process involves forking a repository, making changes in a dedicated branch, 
    creating a request with a descriptive message, having the modifications reviewed,
    addressing feedback if needed, and ultimately merging the changes into the main codebase.

git merge --no-ff branch-name
    --no-ff => No Fast Forward

forking
    Github allow us to create personal copies of the people's
    repositories. We call those copies as "frok" of the original
    
    When we fork a repo, we're basically asking Github 
    "Make me my own copy of this repo please"

Rebasing 
    Rebasing, in simple terms, refers to the process of taking a series of changes or 
    commits from one branch in a Git version control system and applying them onto another branch. 
    It essentially moves the starting point of the branch to a different commit, 
    allowing for a cleaner and more linear history of changes.

    When you rebase a branch onto another, Git will take the changes made in the source branch 
    and replay them on top of the target branch's latest commit. 
    This results in a more streamlined history without the extra merge commits that often occur
    when using other methods like merging branches together.

    Rebasing can be useful to keep a cleaner history and avoid unnecessary merge commits, 
    but it should be used cautiously, especially when collaborating with others, 
    as it rewrites the commit history and can potentially cause conflicts if not done carefully.

    There are two main ways to use git Rebase command
    1) As an alternative to merging
    2) As a cleaning tool

    command: git rebase <branch-name>

    Note: Never Rebase commits that have been shared with others.
    if you have already pushed commits up to github.. DO Not reabase them 
    unless you are positive no one on the team using those commits.

    You do not want to rewites history that other people already have. 
    it;s pain to reconcile the alternate history 

    Interactive Rebase:-

        Running git rebase with the -i option will enter the interactive mode, 
        which allows us to edit commits, add files, drop commits, etc.
        Note that we need to specify how far back we want to rewrite commits.
        Also, notice that we are not rebasing onto another branch.
        Instead, we are rebasing a series of commits onto the HEAD they currently are based on.

        command:- git rebase -i HEAD~4

Semantic Versioning
    The semantic versioning spec outlines a standardized versioning system for software releases. 
    It provides a consistent way for developers to give meaning to their software releases (how big of a change is this release??)

    Versions consist of three numbers separated by periods.
    Ex:- 2.4.1

    Initial Release
        1.0.0

    Patch Release
        Patch releases normally do not contain new features or significant changes.
        They typically signify bug fixes and other changes that do not impact how the code is used
        1.0.1
    Minor Release
        Minor releases signify that new features or functionality have been added, but the project is still backwards compatible.
        The new functionality is optional and should not force users to rewrite their own code.
        1.1.0
    Major Release
        Major releases signify significant changes that is no longer backwards compatible.
        Features may be removed or changed substantially.
        2.0.0

Tags
    There are two types of git tags 
    1) lightweight tags:- They are just name/label that points to particular commit
    2) annotated tags:- Store extra meta deta including the author's name and email,
                        the date, and tagging message(like a commet message)

git tag
    to see all the tags

git tag -l <pattern> '*beta*'
    We can search for tags that match a particular pattern by using git tag -l
    and then passing in a wildcard pattern. For example, git tag -l "*beta*"
    will print a list of tags that include "beta" in their name.

git checkout <tag>
    To view the state of a repo at a particular tag, we can use 
    git checkout <tag>. This puts us in detached HEAD!

Creating Lightweight Tags
    git tag <tagname>
    To create a lightweight tag, use git tag <tagname>
    By default, Git will create the tag referring to the commit
    that Head is referencing

Annotated Tags
    git tag -a <tagname>
    Use git tag -a to create a new annotated tag. Git will 
    then open your default text editor and prompt you for
    additional information

    Similar to git commit, we can also use the -m option to 
    pass a message directly and forgo the opening of the text
    editor 

Info about Tag
    git show <tagname>
    To see the details related to tag

Tagging precious commit
    git tag <tagname> <commit hash>
    We can also tag an older commit by providing the commit hash
    
Update tag forcefully 
    git tag <tagname> <commit hash> -f

Delete Tag
    git tag -d <tagname>

Push Tag 
    git push --tags
 
    By default, the git push command doesnâ€™t transfer tags to remote servers. 
    If you have a lot of tags that you want to push up at once, you can use the --tags option to the 
    git push  command. This will transfer all of your tags to the remote server that are not already there.

    git push <tagname>
    If you want to push specific tag
