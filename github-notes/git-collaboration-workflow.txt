CentraLized Workflow
    Everyone is working on a same branch (for ex: Master branch)

Features Branches 
    Rather than working on Master/Main branch, all new development 
    should be done on separate branches

Pull Request 
    A pull request (PR) is a way to propose changes to a codebase hosted in a repository. 
    It enables collaboration in software development by allowing developers to suggest 
    modifications, have those changes reviewed, and then integrate them into the main branch. 
    The process involves forking a repository, making changes in a dedicated branch, 
    creating a request with a descriptive message, having the modifications reviewed,
    addressing feedback if needed, and ultimately merging the changes into the main codebase.

git merge --no-ff branch-name
    --no-ff => No Fast Forward

forking
    Github allow us to create personal copies of the people's
    repositories. We call those copies as "frok" of the original
    
    When we fork a repo, we're basically asking Github 
    "Make me my own copy of this repo please"

Rebasing 
    Rebasing, in simple terms, refers to the process of taking a series of changes or 
    commits from one branch in a Git version control system and applying them onto another branch. 
    It essentially moves the starting point of the branch to a different commit, 
    allowing for a cleaner and more linear history of changes.

    When you rebase a branch onto another, Git will take the changes made in the source branch 
    and replay them on top of the target branch's latest commit. 
    This results in a more streamlined history without the extra merge commits that often occur
    when using other methods like merging branches together.

    Rebasing can be useful to keep a cleaner history and avoid unnecessary merge commits, 
    but it should be used cautiously, especially when collaborating with others, 
    as it rewrites the commit history and can potentially cause conflicts if not done carefully.

    There are two main ways to use git Rebase command
    1) As an alternative to merging
    2) As a cleaning tool

    command: git rebase <branch-name>

    Note: Never Rebase commits that have been shared with others.
    if you have already pushed commits up to github.. DO Not reabase them 
    unless you are positive no one on the team using those commits.

    You do not want to rewites history that other people already have. 
    it;s pain to reconcile the alternate history 

    Interactive Rebase:-

        Running git rebase with the -i option will enter the interactive mode, 
        which allows us to edit commits, add files, drop commits, etc.
        Note that we need to specify how far back we want to rewrite commits.
        Also, notice that we are not rebasing onto another branch.
        Instead, we are rebasing a series of commits onto the HEAD they currently are based on.

        command:- git rebase -i HEAD~4
